// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "mysql"
    url      = env("DB_TEST_URL")
}

enum Difficulty {
    BEGINNER
    EASY
    MEDIUM
    HARD
    EXPERT
}

model User {
    userId    String   @id @default(uuid()) @map("user_id")
    name      String
    email     String   @unique
    password  String
    state     String?
    city      String?
    phone     String?
    score     Decimal  @default(0)
    isTeacher Boolean  @default(false) @map("is_teacher")
    createdAt DateTime @default(now()) @map("created_at")
    updatedAt DateTime @updatedAt @map("updated_at")
    classId_  String?  @map("class_id")

    class Class? @relation(fields: [classId_], references: [classId])

    submissions_       Submission[]
    created_questions_ Question[]

    @@map("tb_users")
}

model Class {
    classId   String   @id @default(uuid()) @map("class_id")
    name      String // Por quê não só 'name'?
    createdAt DateTime @default(now()) @map("created_at")
    updatedAt DateTime @updatedAt @map("updated_at")

    questions_ Question[]
    users_     User[]

    @@map("tb_classes")
}

model QuestionTopic {
    topicId   String   @id @default(uuid()) @map("topic_id")
    name      String
    createdAt DateTime @default(now()) @map("created_at")
    updatedAt DateTime @updatedAt @map("updated_at")

    questions_ Question[]

    @@map("tb_question_topics")
}

model QuestionTest {
    testId      String   @id @default(uuid()) @map("test_id")
    input       String
    output      String
    createdAt   DateTime @default(now()) @map("created_at")
    updatedAt   DateTime @updatedAt @map("updated_at")
    questionId_ String   @map("question_id")

    question Question @relation(fields: [questionId_], references: [questionId])

    @@map("tb_question_tests")
}

model QuestionDifficulty {
    difficultyId String     @id @default(uuid()) @map("difficulty_id")
    name         Difficulty
    createdAt    DateTime   @default(now()) @map("created_at")
    updatedAt    DateTime   @updatedAt @map("updated_at")

    questions Question[]

    @@map("tb_question_difficulties")
}

model Question {
    questionId          String   @id @default(uuid()) @map("question_id")
    title               String   @unique
    description         String?
    detailedDescription String   @map("detailed_description")
    code                String
    createdAt           DateTime @default(now()) @map("created_at")
    updatedAt           DateTime @updatedAt @map("updated_at")
    classId_            String?  @map("class_id")
    topicId_            String   @map("topic_id")
    difficultyId_       String   @map("difficulty_id")
    userCreatorId_      String   @map("user_creator_id")

    class       Class?             @relation(fields: [classId_], references: [classId])
    topic       QuestionTopic      @relation(fields: [topicId_], references: [topicId])
    userCreator User               @relation(fields: [userCreatorId_], references: [userId])
    difficulty  QuestionDifficulty @relation(fields: [difficultyId_], references: [difficultyId])

    submissions_ Submission[]
    tests_       QuestionTest[]

    @@map("tb_questions")
}

model Submission {
    userId_       String
    questionId_   String
    code          String
    isCorrectCode Boolean  @map("is_correct_code")
    createdAt     DateTime @default(now()) @map("created_at")

    user     User     @relation(fields: [userId_], references: [userId], onDelete: Cascade)
    question Question @relation(fields: [questionId_], references: [questionId])

    @@id([userId_, questionId_])
    @@map("tb_submissions")
}
